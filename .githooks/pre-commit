#!/bin/sh

# Pre-commit hook for trip-settle
# This hook runs quality checks before allowing a commit
#
# Checks performed:
# 1. Code formatting (Prettier)
# 2. Linting (ESLint)
# 3. Type checking (TypeScript + Svelte)
# 4. Build validation (all packages)
#
# Note: E2E tests are NOT run in pre-commit due to slow execution time.
#       Run manually before pushing: npm run test:e2e:docker

set -e  # Exit immediately if any command fails

echo "=========================================="
echo "🎣 Git Hook: Pre-commit"
echo "=========================================="
echo ""

# Check for UI changes that may require visual snapshot updates
changed_files=$(git diff --cached --name-only --diff-filter=ACM)

if echo "$changed_files" | grep -qE "\.(svelte|css)$"; then
    echo "⚠️  UI Changes Detected"
    echo "------------------------------------------"
    echo "You've modified UI files that may affect visual snapshots:"
    echo ""
    echo "$changed_files" | grep -E "\.(svelte|css)$" | sed 's/^/  📄 /'
    echo ""

    # Get commit message from COMMIT_EDITMSG (available during commit)
    commit_msg=""
    if [ -f ".git/COMMIT_EDITMSG" ]; then
        commit_msg=$(cat .git/COMMIT_EDITMSG)
    fi

    # Check for snapshot handling keywords
    has_update_keyword=false
    has_skip_keyword=false

    if echo "$commit_msg" | grep -q "\[update-snapshots\]"; then
        has_update_keyword=true
    fi

    if echo "$commit_msg" | grep -q "\[skip-snapshots\]"; then
        has_skip_keyword=true
    fi

    if [ "$has_update_keyword" = true ]; then
        echo "✅ Snapshot update keyword detected: [update-snapshots]"
        echo "   CI will automatically update visual snapshots after push."
    elif [ "$has_skip_keyword" = true ]; then
        echo "✅ Snapshot skip keyword detected: [skip-snapshots]"
        echo "   You've confirmed these changes don't affect visual appearance."
    else
        echo ""
        echo "❌ ERROR: Missing snapshot handling keyword"
        echo "=========================================="
        echo ""
        echo "UI files were modified but no snapshot keyword found in commit message."
        echo ""
        echo "You must explicitly declare snapshot handling intent:"
        echo ""
        echo "  Option 1: [update-snapshots]"
        echo "    • Use when UI appearance changes (styling, layout, new elements)"
        echo "    • CI will automatically update snapshots after push"
        echo "    • Example: git commit -m \"feat: Redesign button [update-snapshots]\""
        echo ""
        echo "  Option 2: [skip-snapshots]"
        echo "    • Use when UI files changed but appearance unchanged"
        echo "    • Example: Internal refactoring, prop renaming, type changes"
        echo "    • Example: git commit -m \"refactor: Extract component logic [skip-snapshots]\""
        echo ""
        echo "See CLAUDE.md 'Playwright E2E Testing → Visual Snapshot Management' for details."
        echo ""
        echo "=========================================="
        echo "💡 Tip: Use --no-verify to bypass (not recommended)"
        echo "=========================================="
        exit 1
    fi
    echo "=========================================="
    echo ""
fi

# Function to print step header
print_step() {
    echo "▶ $1"
    echo "------------------------------------------"
}

# Function to print success
print_success() {
    echo "✅ $1"
    echo ""
}

# Function to print error and exit
print_error() {
    echo ""
    echo "❌ $1"
    echo "=========================================="
    echo "💡 Tip: Fix the issues above and try again"
    echo "   Or use --no-verify to skip hooks (not recommended)"
    echo "=========================================="
    exit 1
}

# 1. Clean any existing build artifacts first
print_step "Cleaning existing build artifacts..."
find packages/infra -type f \( -name "*.js" -o -name "*.d.ts" -o -name "*.js.map" \) ! -name "jest.config.js" ! -name ".eslintrc.js" -delete 2>/dev/null || true
print_success "Cleaned existing artifacts"

# 2. Check code formatting
print_step "Checking code formatting..."
if npm run format:check; then
    print_success "Code formatting check passed"
else
    print_error "Code formatting check failed. Run 'npm run format' to fix."
fi

# 3. Run linters
print_step "Running linters..."
if npm run lint; then
    print_success "Linting passed"
else
    print_error "Linting failed. Fix the issues above."
fi

# 4. Type check all TypeScript files (including tests)
print_step "Type checking TypeScript files..."
if npm run type-check --workspace=frontend; then
    print_success "Type checking passed"
else
    print_error "Type checking failed. Fix type errors above."
fi

# 5. Build all packages
print_step "Building all packages..."
if npm run build; then
    print_success "Build successful"
else
    print_error "Build failed. Fix compilation errors above."
fi

# 6. Clean build artifacts after validation
print_step "Cleaning build artifacts..."
find packages/infra -type f \( -name "*.js" -o -name "*.d.ts" -o -name "*.js.map" \) ! -name "jest.config.js" ! -name ".eslintrc.js" -delete 2>/dev/null || true
print_success "Build artifacts cleaned"

# All checks passed!
echo "=========================================="
echo "✅ All pre-commit checks passed!"
echo "=========================================="
echo "💡 Remember to run E2E tests before pushing:"
echo "   npm run test:e2e:docker"
echo "=========================================="
echo ""

exit 0