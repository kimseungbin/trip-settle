# Trip Settle TDD Workflow
# Test-Driven Development workflow for all feature implementations

name: "TDD Workflow"
description: "Mandatory Test-Driven Development workflow for Trip Settle features"
applies_to: "All feature implementations (exceptions listed below)"

phases:
  1_plan:
    name: "Plan"
    description: "Break down the feature into clear, testable requirements"
    actions:
      - "Identify affected components (frontend, backend, or both)"
      - "Define success criteria and expected behavior"
      - "Use TodoWrite tool to create and track implementation tasks"
      - "Consider edge cases and error scenarios"

    questions_to_answer:
      - "What is the user-facing behavior we're implementing?"
      - "Which components/modules will be affected?"
      - "What are the success criteria?"
      - "Are there accessibility requirements (keyboard, screen reader)?"

    output: "Clear task list with testable acceptance criteria"

  2_red:
    name: "Write Tests First (Red Phase)"
    description: "Write failing UNIT tests before any implementation code"

    important: |
      ⚠️ CRITICAL: During TDD Red-Green-Refactor cycles, ONLY write and run UNIT tests.

      E2E tests are written when appropriate, but NOT run until Pre-Push Validation.
      Running E2E tests during TDD cycles takes several minutes and destroys fast feedback.

      See CLAUDE.md "Testing Strategy & Test Pyramid" for detailed execution contexts.

    test_types_for_tdd:
      backend:
        unit_tests:
          framework: "Jest"
          pattern: "*.spec.ts"
          purpose: "Test individual functions, services, controllers"
          example: "ExpenseService.calculateTotal() returns correct sum"
          command: "npm run test --workspace=backend"
          speed: "< 5 seconds"
          run_in_tdd: true

        integration_tests:
          framework: "Jest"
          pattern: "*.integration.spec.ts"
          purpose: "Test database operations, module interactions"
          example: "ExpenseController POST /api/expenses creates record in DB"
          command: "npm run test --workspace=backend"
          speed: "10-30 seconds"
          run_in_tdd: false
          note: "Write during Red phase, but run during Pre-Push Validation only"

      frontend:
        unit_tests:
          framework: "Vitest"
          pattern: "*.test.ts, *.spec.ts"
          purpose: "Test component logic, utilities, state management"
          example: "ExpenseForm validates amount input correctly"
          command: "npm run test --workspace=frontend"
          speed: "< 5 seconds"
          run_in_tdd: true

    test_types_for_prepush:
      note: "These tests are WRITTEN during Red phase but RUN during Pre-Push Validation"

      frontend:
        e2e_tests:
          framework: "Playwright"
          pattern: "tests/e2e/*.spec.ts"
          purpose: "Test user workflows and interactions end-to-end"
          example: "User can add, edit, and delete expenses"
          command: "npm run test:e2e:docker"
          speed: "2-5 minutes"
          run_in_tdd: false
          run_in_prepush: true

        visual_tests:
          framework: "Playwright"
          pattern: "tests/visual/*.spec.ts"
          purpose: "Catch unintended UI changes with screenshot comparison"
          when: "UI components are added or modified"
          command: "CI-only (automated)"
          speed: "2-5 minutes"
          run_in_tdd: false
          run_in_prepush: false
          run_in_ci: true

        keyboard_tests:
          framework: "Playwright"
          pattern: "tests/e2e/keyboard-*.spec.ts"
          purpose: "Ensure keyboard accessibility (Tab, Enter, Escape, shortcuts)"
          when: "Interactive elements are added (forms, buttons, lists)"
          command: "npm run test:e2e:docker"
          speed: "2-5 minutes"
          run_in_tdd: false
          run_in_prepush: true

    validation:
      requirement: "UNIT tests MUST fail initially"
      rationale: "Failing tests prove they're actually testing the new feature"
      tip: "Run UNIT tests immediately after writing them to verify they fail (< 5s)"
      critical: "Do NOT run E2E tests to verify failure - they take minutes, not seconds"

    best_practices:
      - "Write UNIT tests for logic, write E2E tests for workflows (run later)"
      - "Test behavior, not implementation details"
      - "Include both happy path and error cases"
      - "Use descriptive test names: 'should validate email format'"
      - "For frontend, use accessible selectors (getByRole, getByPlaceholder)"
      - "Keep TDD cycles fast: unit tests only (< 5s feedback)"

  3_green:
    name: "Implement Feature (Green Phase)"
    description: "Write minimum code to make all tests pass"

    guidelines:
      - "Follow existing code patterns and architecture"
      - "Ensure type safety (TypeScript strict mode)"
      - "Implement proper error handling"
      - "Maintain accessibility and keyboard support"
      - "Keep it simple - only write code needed to pass tests"

    code_quality:
      - "Use TypeScript types, avoid 'any'"
      - "Follow naming conventions (camelCase for variables, PascalCase for components)"
      - "Add JSDoc comments for complex functions"
      - "Handle edge cases identified in planning phase"

    accessibility_checklist:
      - "Forms submit with Enter key, clear with Escape"
      - "Interactive elements accessible via Tab key"
      - "ARIA labels for screen readers where needed"
      - "Keyboard shortcuts documented in KeyboardHint component"

    tip: "Resist the urge to over-engineer. Write the simplest code that passes tests."

  4_verify:
    name: "Verify Tests Pass"
    description: "Run UNIT tests and quality checks (< 30 seconds total)"

    important: |
      ⚠️ CRITICAL: Only run UNIT tests during Verify phase.
      E2E tests take minutes and are run during Pre-Push Validation (see below).

    commands_for_tdd_cycle:
      backend:
        unit_tests: "npm run test --workspace=backend"
        coverage: "npm run test:cov --workspace=backend"

      frontend:
        unit_tests: "npm run test --workspace=frontend"
        type_check: "npm run type-check --workspace=frontend"

      quality:
        format: "npm run format"
        lint: "npm run lint"
        build: "npm run build"

    success_criteria:
      - "✅ All new UNIT tests pass (< 5s)"
      - "✅ No regressions in existing UNIT tests"
      - "✅ Code formatting passes (Prettier)"
      - "✅ Linting passes (ESLint)"
      - "✅ TypeScript compilation succeeds"
      - "✅ Build completes without errors"

    performance_target: "< 30 seconds total for all checks"

    if_tests_fail:
      - "Review test expectations - are they correct?"
      - "Check implementation logic for bugs"
      - "Verify test setup/teardown is correct"
      - "Use debugger or console.log to trace execution"
      - "For unit tests: Use watch mode for faster iteration"

  5_refactor:
    name: "Refactor (Optional)"
    description: "Clean up implementation while keeping tests green"

    when_to_refactor:
      - "Code duplication can be extracted to shared functions"
      - "Complex conditionals can be simplified"
      - "Performance can be improved without changing behavior"
      - "Names can be more descriptive"

    guidelines:
      - "Keep all tests passing (green) throughout refactoring"
      - "Make one change at a time, verify tests after each"
      - "Extract reusable components/functions/utilities"
      - "Improve readability and maintainability"

    common_refactorings:
      - "Extract method: Pull complex logic into named functions"
      - "Extract component: Pull reusable UI into separate components"
      - "Consolidate conditionals: Simplify complex if/else chains"
      - "Rename variables: Use more descriptive names"

    tip: "Refactoring is optional but encouraged. Skip if code is already clean."

  6_commit:
    name: "Commit"
    description: "Create descriptive commit following project conventions"

    skill: "git-commit-rules"
    skill_location: ".claude/skills/git-commit-rules/commit-rules.yaml"

    steps:
      - "Stage changes: git add ."
      - "Review git-commit-rules skill for format and examples"
      - "Write commit message following conventional commit format"
      - "Include what changed and why (not how)"
      - "Mention tests added in commit body"

    format: "type(scope): Subject line"
    example: "feat(frontend): Add expense edit functionality"

prepush_validation:
  name: "Pre-Push Validation (Outside TDD Cycle)"
  description: "Run comprehensive tests BEFORE pushing to remote (manual, on-demand)"

  important: |
    ⚠️ This is NOT part of the TDD Red-Green-Refactor cycle.
    Run these tests MANUALLY before `git push` to catch integration issues.

    Pre-push validation is EXPENSIVE (2-5 minutes) and should NOT be run during active development.

  when_to_run:
    - "Before pushing commits to remote repository"
    - "After completing multiple TDD cycles (multiple commits ready)"
    - "When E2E tests were written but not yet validated"
    - "Before creating a pull request"

  commands:
    backend:
      unit_tests: "npm run test --workspace=backend"
      integration_tests: "npm run test:e2e --workspace=backend"
      coverage: "npm run test:cov --workspace=backend"

    frontend:
      unit_tests: "npm run test --workspace=frontend"
      e2e_tests: "npm run test:e2e:docker"
      type_check: "npm run type-check --workspace=frontend"

    quality:
      format_check: "npm run format:check"
      lint: "npm run lint"
      build: "npm run build"

  success_criteria:
    - "✅ All unit tests pass"
    - "✅ All integration tests pass (backend)"
    - "✅ All E2E functional tests pass (frontend)"
    - "✅ Code formatting is correct"
    - "✅ No linting errors"
    - "✅ Build succeeds"

  performance_expectations:
    backend: "30-60 seconds (unit + integration)"
    frontend: "2-5 minutes (unit + E2E via Docker)"
    total: "3-6 minutes for full validation"

  workflow:
    - "Complete multiple TDD cycles (red-green-refactor-commit)"
    - "Run pre-push validation commands"
    - "Fix any issues discovered by E2E or integration tests"
    - "Run unit tests again to verify fixes (fast)"
    - "Push to remote: git push"

  note: |
    E2E tests are NOT run in git hooks due to execution time.
    Developers are responsible for running pre-push validation manually.

    Visual regression tests are CI-only and never run locally.
    See CLAUDE.md "Testing Strategy & Test Pyramid" for details.

selective_e2e_execution:
  name: "Selective E2E Test Execution (Speed Optimization)"
  description: "Run only E2E tests affected by code changes to speed up validation"

  rationale: |
    Running ALL E2E tests (7 files × 4 browsers = 28 suites) takes 2-5 minutes.
    Running SELECTIVE tests (1-2 files × 1 browser) takes 10-30 seconds.

    During local development, run only tests related to changed components.
    Full test suite runs automatically in CI to catch cross-feature regressions.

  local_vs_ci:
    local_development:
      browser_config: "Single browser (webkit/Safari) - configured in playwright.config.ts"
      test_selection: "Selective - only affected test files"
      speed: "10-30 seconds"
      when: "Pre-push validation on developer machine"

    ci_docker:
      browser_config: "Full matrix (chromium, webkit, 2 mobile) - configured in playwright.config.ts"
      test_selection: "All tests"
      speed: "2-5 minutes"
      when: "Automated on push/PR"

  component_to_test_mapping:
    description: "Map changed components to their affected E2E test files"

    expense_features:
      components:
        - "ExpenseTracker.svelte"
        - "ExpenseForm.svelte"
        - "ExpenseList.svelte"
        - "CurrencySelector.svelte"
      test_files:
        - "expense-workflow.spec.ts"
        - "keyboard-navigation.spec.ts"
      command: "npx playwright test expense-workflow keyboard-navigation"

    onboarding_flow:
      components:
        - "Onboarding.svelte"
        - "lib/router.svelte.ts"
      test_files:
        - "onboarding.spec.ts"
        - "routing.spec.ts"
      command: "npx playwright test onboarding routing"

    dev_tools:
      components:
        - "DevTools.svelte"
        - "SystemStatus.svelte"
        - "LocalStorageViewer.svelte"
      test_files:
        - "local-storage-viewer.spec.ts"
      command: "npx playwright test local-storage-viewer"

    keyboard_hints:
      components:
        - "KeyboardHint.svelte"
        - "lib/keyboardHint.ts"
      test_files:
        - "keyboard-navigation.spec.ts"
      command: "npx playwright test keyboard-navigation"

    shared_components:
      note: "Changes to App.svelte, layout, or shared utilities may affect multiple tests"
      components:
        - "App.svelte"
        - "main.ts"
        - "config/*"
      recommendation: "Run smoke tests (expense-workflow + onboarding) or full suite"
      command: "npx playwright test expense-workflow onboarding"

  usage_examples:
    by_file_pattern:
      description: "Run tests matching file name pattern"
      examples:
        - command: "npx playwright test expense"
          matches: "expense-workflow.spec.ts"
        - command: "npx playwright test onboarding routing"
          matches: "onboarding.spec.ts, routing.spec.ts"
        - command: "npx playwright test local-storage"
          matches: "local-storage-viewer.spec.ts"

    by_grep_pattern:
      description: "Run tests matching describe block text"
      examples:
        - command: "npx playwright test --grep 'Expense'"
          matches: "All test blocks with 'Expense' in describe()"
        - command: "npx playwright test --grep 'LocalStorage'"
          matches: "LocalStorageViewer Component tests"
        - command: "npx playwright test --grep 'keyboard'"
          matches: "All keyboard-related tests"

    smoke_tests:
      description: "Run critical path tests only (fastest validation)"
      command: "npx playwright test expense-workflow onboarding"
      coverage: "Core user flows (add expense, complete onboarding)"
      speed: "15-30 seconds"

  claude_code_responsibilities:
    what_claude_can_do:
      - "✅ Write/update E2E test files when features change"
      - "✅ Suggest which tests human should run based on changed files"
      - "✅ Include component-to-test mapping in recommendations"
      - "✅ Remind human to run E2E tests before pushing"

    what_claude_cannot_do:
      - "❌ NEVER run E2E tests (any command with test:e2e, playwright test)"
      - "❌ NEVER execute npm run test:e2e:docker"
      - "❌ NEVER execute npx playwright test"

    suggestion_template: |
      "I've updated {component}. Before pushing, you should run:

      npx playwright test {suggested-test-files}

      This will test only the affected features (takes ~30 seconds locally).
      Alternatively, run the full suite: npm run test:e2e:docker (takes 2-5 minutes)."

  best_practices:
    - "Run selective tests during pre-push validation for speed"
    - "Let CI run full test suite for comprehensive coverage"
    - "If unsure which tests to run, use smoke tests or full suite"
    - "Update component-to-test mapping as codebase evolves"
    - "Local config uses webkit only (playwright.config.ts isLocalDev flag)"

exceptions:
  description: "Workflow can be relaxed for these cases"

  cases:
    documentation_only:
      description: "*.md file changes with no code modifications"
      relaxed_phases: ["red", "green", "verify"]
      still_required: ["plan", "commit"]
      example: "Updating README with new setup instructions"

    configuration:
      description: "Config file tweaks (tsconfig, prettier, eslint)"
      relaxed_phases: ["red"]
      still_required: ["verify", "commit"]
      example: "Adjusting ESLint rules"

    emergency_hotfix:
      description: "Critical production bug requiring immediate fix"
      relaxed_phases: ["red"]
      requirement: "Tests MUST be added immediately after hotfix"
      example: "Fix security vulnerability"

  note: "Use exceptions sparingly. TDD catches bugs early and ensures code quality."

examples:
  feature_frontend:
    description: "Adding new frontend feature with full TDD cycle + pre-push validation"
    scenario: "User requests: Add expense edit functionality"

    workflow:
      plan:
        - "Create TodoWrite list: Research -> Write tests -> Implement -> Verify -> Commit"
        - "Identify components: ExpenseList, ExpenseForm, API client"
        - "Success criteria: Edit button, inline edit form, saves to backend"

      red:
        - "Write UNIT test in ExpenseList.test.ts: Test edit button renders and calls handler"
        - "Write UNIT test in ExpenseForm.test.ts: Test inline edit mode state management"
        - "Run: npm run test --workspace=frontend (< 5s)"
        - "Result: ❌ Tests fail (expected - feature doesn't exist)"
        - "NOTE: Also write E2E test (tests/e2e/edit-expense.spec.ts) but DON'T run it yet"

      green:
        - "Add edit button to ExpenseList items"
        - "Create inline edit form in ExpenseForm"
        - "Wire up PUT request to backend API"
        - "Add keyboard shortcuts (Enter to save, Escape to cancel)"

      verify:
        - "npm run test --workspace=frontend → ✅ Unit tests pass (< 5s)"
        - "npm run format && npm run lint → ✅ Quality checks pass"
        - "npm run build → ✅ Build succeeds"

      refactor:
        - "Extract edit form logic to separate component"
        - "Consolidate save/cancel handlers"
        - "Re-run unit tests → ✅ Still passing"

      commit:
        - "git add ."
        - "git commit -m 'feat(frontend): Add expense edit functionality'"

      prepush:
        - "Before pushing: npm run test:e2e:docker (2-5 min)"
        - "E2E test validates full edit workflow end-to-end"
        - "If E2E fails: Fix issue, run unit tests (fast), then retry E2E"
        - "git push"

  bug_fix_backend:
    description: "Fixing backend bug with TDD (unit tests only)"
    scenario: "Users report duplicate expenses created on double-click"

    workflow:
      plan:
        - "Root cause: No idempotency check in POST /api/expenses"
        - "Solution: Add unique constraint + service-level validation"

      red:
        - "Write UNIT test in expenses.service.spec.ts: Test duplicate detection logic"
        - "Write UNIT test in expenses.controller.spec.ts: Test 409 response"
        - "Run: npm run test --workspace=backend (< 5s)"
        - "Result: ❌ Tests fail (expected - validation doesn't exist)"
        - "NOTE: Also write integration test but save it for pre-push validation"

      green:
        - "Add unique constraint to ExpenseEntity"
        - "Update service to catch duplicate key error"
        - "Return 409 with helpful error message"

      verify:
        - "npm run test --workspace=backend → ✅ Unit tests pass (< 5s)"
        - "npm run format && npm run lint → ✅ Quality checks pass"
        - "npm run build → ✅ Build succeeds"

      commit:
        - "git commit -m 'fix(backend): Prevent duplicate expense creation'"

      prepush:
        - "Before pushing: npm run test:e2e --workspace=backend"
        - "Integration test validates DB-level constraint enforcement"
        - "git push"

  note: |
    Key differences from old workflow:
    - Red/Green/Verify cycles use UNIT tests only (< 5s feedback)
    - E2E/Integration tests are written but NOT run during TDD cycles
    - E2E/Integration tests run during Pre-Push Validation (manual, before git push)
    - This keeps TDD cycles fast while ensuring comprehensive test coverage

best_practices:
  general:
    - "Small, focused commits - one feature per commit"
    - "Keep tests fast - use mocks/stubs where appropriate"
    - "Test behavior, not implementation - refactor freely without breaking tests"
    - "Write tests you'd want to read 6 months from now"

  frontend_specific:
    - "E2E tests for user workflows, unit tests for component logic"
    - "Visual regression tests catch unintended CSS changes"
    - "Always test keyboard navigation for interactive features"
    - "Use Playwright UI mode (npm run test:e2e:ui) for test debugging"

  backend_specific:
    - "Unit tests for business logic, integration tests for DB operations"
    - "Test both success and error paths"
    - "Mock external dependencies (APIs, databases) in unit tests"
    - "Use pg-mem for fast in-memory database tests"

tools_and_commands:
  test_execution:
    all_tests: "npm test"
    backend_unit: "npm run test --workspace=backend"
    backend_watch: "npm run test:watch --workspace=backend"
    frontend_unit: "npm run test --workspace=frontend"
    frontend_e2e: "npm run test:e2e:docker"
    frontend_e2e_ui: "npm run test:e2e:ui --workspace=frontend"

  quality_checks:
    format: "npm run format"
    format_check: "npm run format:check"
    lint: "npm run lint"
    type_check: "npm run type-check --workspace=frontend"
    build: "npm run build"

  debugging:
    playwright_ui: "npm run test:e2e:ui --workspace=frontend"
    playwright_debug: "npm run test:e2e:debug --workspace=frontend"
    jest_watch: "npm run test:watch --workspace=backend"

enforcement:
  message: "Claude Code MUST follow this workflow for all feature implementations"
  rationale: |
    TDD ensures:
    - Features work as intended before merging
    - Regressions are caught immediately
    - Code is testable and maintainable
    - Documentation through tests
    - Confidence to refactor
