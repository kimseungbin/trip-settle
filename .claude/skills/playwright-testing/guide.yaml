# Playwright E2E Testing Guide for Trip Settle
# Operational guide for running, writing, and debugging Playwright tests

name: "Playwright Testing"
description: "End-to-end, visual regression, keyboard navigation, and accessibility testing with Playwright"
applies_to: "Frontend package (packages/frontend)"

test_structure:
  location: "packages/frontend/tests/"

  directories:
    e2e:
      path: "tests/e2e/"
      purpose: "User workflows and interactions"
      examples:
        - "expense-workflow.spec.ts (12 tests: CRUD operations, validation)"
        - "keyboard-navigation.spec.ts (14 tests: Tab, Enter, shortcuts, focus)"

    visual:
      path: "tests/visual/"
      purpose: "UI screenshot comparisons"
      examples:
        - "ui-snapshots.spec.ts (13 tests: Screenshot comparisons)"

    accessibility:
      path: "tests/accessibility/"
      purpose: "WCAG 2.1 AA compliance"
      examples:
        - "a11y.spec.ts (14 tests: WCAG audits, currently test.fixme())"
      note: "Accessibility tests marked test.fixme() until UI stabilizes"

running_tests:
  docker_based:
    name: "Docker-Based Testing (Recommended)"
    when_to_use: "Default testing, pre-push checks, CI/CD"

    prerequisites:
      - "Docker and Docker Compose installed (included with Docker Desktop)"

    commands:
      run_tests: "npm run test:e2e:docker"
      clean_up: "npm run test:e2e:docker:clean"

    how_it_works:
      description: "Three Docker services orchestrated by docker-compose.e2e.yml"
      services:
        - "Backend Service: NestJS API with pg-mem database"
        - "Frontend Service: Vite dev server"
        - "Playwright Service: Official Playwright image (mcr.microsoft.com/playwright:v1.56.1-noble)"

    advantages:
      - "Zero setup: No 'npx playwright install' needed"
      - "Consistency: Same browser versions on all machines (Mac, Linux, Windows)"
      - "CI/CD parity: Identical environment to GitHub Actions"
      - "Isolation: Tests don't affect local environment"
      - "Orchestration: Automatically starts backend + frontend"

    files:
      dockerfile: "packages/frontend/Dockerfile.e2e"
      compose: "docker-compose.e2e.yml"
      dockerignore: ".dockerignore"

    troubleshooting:
      localhost_connection: "Docker uses service names (frontend:5173) - handled automatically"
      slow_first_build: "Downloads ~1.5GB Playwright image, then cached"
      permission_errors: "Run: sudo chown -R $USER packages/frontend/playwright-report"

  local:
    name: "Local Testing (Advanced)"
    when_to_use: "Active test development, debugging, need immediate feedback"

    advantages:
      - "Faster iteration: ~30s vs ~2-3min (no container startup)"
      - "IDE integration: Playwright UI mode, inspector, step-through debugging"
      - "Interactive development: Rapid test writing with watch mode"

    setup:
      one_time: "npx playwright install --with-deps chromium webkit"

    commands:
      headless: "npm run test:e2e --workspace=frontend"
      ui_mode: "npm run test:e2e:ui --workspace=frontend"
      headed: "npm run test:e2e:headed --workspace=frontend"
      debug: "npm run test:e2e:debug --workspace=frontend"
      report: "npm run test:e2e:report --workspace=frontend"
      update_snapshots: "npm run test:e2e:update-snapshots --workspace=frontend"

    comparison:
      setup: "Requires: npx playwright install --with-deps"
      consistency: "⚠️ OS-dependent rendering (fonts, antialiasing)"
      speed: "~30sec (no container overhead)"
      ide_integration: "✅ Full (UI mode, inspector, WebStorm)"
      ci_cd_parity: "⚠️ May differ from CI environment"

    tip: "Use local for active development, switch back to Docker before committing"

test_examples:
  e2e_workflow:
    description: "Test user workflows and interactions"
    example: |
      test('can add expense', async ({ page }) => {
          await page.goto('/')
          await page.getByPlaceholder('Expense name').fill('Coffee')
          await page.getByPlaceholder('Amount').fill('4.50')
          await page.getByRole('button', { name: 'Add' }).click()

          await expect(page.locator('.expense-name')).toContainText('Coffee')
          await expect(page.locator('.total-amount')).toContainText('4.50')
      })

  visual_regression:
    description: "Screenshot comparison to detect UI changes"
    example: |
      test('expense form UI', async ({ page }) => {
          await page.goto('/')
          const form = page.locator('.form-container')

          // Compare to baseline screenshot
          await expect(form).toHaveScreenshot('expense-form.png')
      })

  keyboard_navigation:
    description: "Test keyboard accessibility"
    example: |
      test('can submit with Enter key', async ({ page }) => {
          await page.goto('/')
          await page.getByPlaceholder('Expense name').fill('Test')
          await page.getByPlaceholder('Amount').fill('10.00')
          await page.keyboard.press('Enter')

          await expect(page.locator('.expense-name')).toContainText('Test')
      })

  accessibility:
    description: "WCAG compliance testing with axe-core"
    example: |
      test('no accessibility violations', async ({ page }) => {
          await page.goto('/')

          const results = await new AxeBuilder({ page }).analyze()
          expect(results.violations).toEqual([])
      })

when_tests_fail:
  debugging_info:
    description: "Playwright provides rich debugging information"
    available:
      screenshots: "Automatically captured on failure"
      videos: "Optional recording of test execution"
      traces: "Step-by-step replay with DOM snapshots, console logs, network activity"
      html_report: "Interactive report with all test results"

  view_report: "npm run test:e2e:report --workspace=frontend"

visual_regression_workflow:
  philosophy:
    name: "Remote-Only Visual Testing"
    description: "Visual regression tests are NEVER run locally"
    rationale:
      why: "Running visual tests locally is an anti-pattern due to high flakiness"
      causes:
        - "OS rendering differences (macOS vs Linux font hinting, subpixel rendering)"
        - "Docker-on-macOS quirks (host kernel affects rendering even in containers)"
        - "GPU/hardware variations (acceleration, color profiles)"
        - "Timing/network conditions (loading states, animations)"
      solution: "Visual snapshots are ONLY generated, updated, and validated in remote CI environment (GitHub Actions)"

  environment_based_testing:
    description: "Project uses TEST_ENV variable to enforce remote-only visual testing"
    environments:
      local:
        value: "TEST_ENV=local (default)"
        behavior: "Skips visual regression tests, runs functional E2E tests only"
        who: "Local developers"
      ci_docker:
        value: "TEST_ENV=ci-docker"
        behavior: "Runs ALL tests including visual snapshots"
        who: "GitHub Actions only"
      ecs:
        value: "TEST_ENV=ecs (future)"
        behavior: "Production validation tests"
        who: "ECS environment"

    what_runs_where:
      local_developer:
        functional_e2e: true
        visual_regression: false
        snapshot_updates: false
      github_actions:
        functional_e2e: true
        visual_regression: true
        snapshot_updates: true

  first_run:
    description: "Creates baseline screenshots"
    location: "tests/<test-name>-snapshots/"

  subsequent_runs:
    pass: "UI matches baseline (within threshold)"
    fail: "UI differs - test shows visual diff"

  updating_snapshots:
    description: "How to update visual snapshots when UI changes cause CI visual tests to fail"

    option_1_commit_footer:
      name: "Commit Footer Trigger (Recommended)"
      steps:
        - "Add 'Snapshots: update' footer to commit message"
        - "Push to trigger CI snapshot update"
        - "Workflow automatically updates snapshots and commits"
        - "Pull the updated snapshots"
      example: |
        git commit -m "feat(frontend): Redesign primary button

        Changes button color and adds hover animation.

        Snapshots: update"
        git push
        # CI automatically updates snapshots and commits
        git pull
      note: "When pushing multiple commits, workflow checks ALL commits. If ANY commit contains 'Snapshots: update', workflow runs."

    option_2_pr_comment:
      name: "PR Comment Trigger"
      steps:
        - "Create PR with your changes"
        - "Comment on PR: /update-snapshots"
        - "Workflow updates snapshots automatically"
        - "Review and merge"

    option_3_manual_workflow:
      name: "Manual Workflow Trigger"
      steps:
        - "Push your code changes"
        - "Go to GitHub Actions → 'Update Visual Snapshots' → Run workflow"
        - "Workflow updates snapshots and commits to your branch"
        - "Pull the changes"

    selective_scope:
      description: "Optional optimization to speed up snapshot updates when you know specific tests need updating"
      default:
        footer: "Snapshots: update"
        behavior: "Updates all snapshots (safest)"
        performance: "~2-5 minutes (64 snapshots)"
      visual_only:
        footer: "Snapshots: update:visual"
        behavior: "Update only visual snapshots (tests/visual/)"
        when: "Only changed CSS/styling, no interaction changes"
        performance: "~30-40 seconds (52 snapshots)"
      e2e_only:
        footer: "Snapshots: update:e2e"
        behavior: "Update only e2e snapshots (tests/e2e/)"
        when: "Only changed keyboard focus behavior"
        performance: "~20-30 seconds (12 snapshots)"
      warning: "Selective scope is an optimization. Use with caution—if unsure, use default 'Snapshots: update' to ensure all affected tests are updated."

  when_to_update_snapshots:
    description: "Visual snapshots capture exact pixel-perfect appearance. Update whenever you intentionally change how something looks."

    always_update_after:
      css_styling:
        - "Colors, backgrounds, borders"
        - "Spacing (padding, margin, gap)"
        - "Shadows, gradients, opacity"
        - "Font sizes, weights, or families"
        - "Focus/hover/active state styling"
      visual_elements:
        - "Icons, emojis, badges"
        - "Decorative elements"
        - "Loading spinners, animations"
        - "Visual feedback indicators"
      layout_changes:
        - "Flexbox/grid structure"
        - "Element positioning"
        - "Component sizing"
        - "Responsive breakpoints"
      text_content:
        - "Labels, placeholders, help text"
        - "Error messages"
        - "Button text"

    do_not_update_for:
      - "Logic/behavior changes (state management, event handlers)"
      - "Test code modifications"
      - "Backend API changes"
      - "Documentation updates"
      - "Configuration changes"

    detection_workflow:
      pre_commit_hook:
        description: "When committing .svelte or .css files, pre-commit hook displays warning"
        example: |
          ⚠️  UI Changes Detected
          You've modified UI files that may affect visual snapshots:
            📄 packages/frontend/src/components/Button.svelte

          If this changes visual appearance, remember to update snapshots:
            • Add "Snapshots: update" footer to commit message, OR
            • Comment /update-snapshots on PR after pushing
      ci_validation: "If you push without updating snapshots, CI will fail with visual diff errors"
      update_process: "Use any of the three methods above (commit footer recommended)"

    best_practices:
      - "Update snapshots in same PR that changes UI (keeps changes atomic)"
      - "Review visual diff artifacts in CI to verify changes are intentional"
      - "If CI visual tests fail unexpectedly, check for unintended style side effects"
      - "Never commit *-darwin.png or platform-specific snapshots (CI will reject them)"

  verifying_changes:
    steps:
      - "CI workflow commits snapshot updates with detailed message"
      - "Review git diff in snapshot files"
      - "Check uploaded artifacts for visual diffs"
      - "Ensure only *-linux.png files exist (no *-darwin.png)"

  why_this_works:
    consistency: "All snapshots generated in identical CI environment"
    reliability: "No platform-specific rendering issues"
    audit_trail: "Automated commits show when/why snapshots changed"
    no_local_setup: "Developers don't need Docker/Playwright installed locally"
    golden_rule: "Visual snapshots are a CI-only concern. Developers write code, CI validates visuals."

  when_ui_changes:
    review: "npm run test:e2e:report --workspace=frontend"
    update_baselines: "Use one of three update methods above (commit footer recommended)"
    tip: "Only update baselines after reviewing diffs and confirming changes are intentional"

configuration:
  file: "packages/frontend/playwright.config.ts"

  settings:
    browsers: "Chromium (desktop + mobile)"
    auto_start_server: "Vite starts automatically before tests"
    screenshots: "Only on failure"
    videos: "Retained on failure"
    traces: "On first retry"
    ci_optimized: "Retries, single worker, GitHub Actions reporter"

writing_new_tests:
  step_1:
    description: "Create test file in appropriate directory"
    directories:
      e2e: "tests/e2e/ - User workflows and interactions"
      visual: "tests/visual/ - UI screenshot comparisons"
      accessibility: "tests/accessibility/ - WCAG compliance"

  step_2:
    description: "Use descriptive test names"
    example: "test('complete expense workflow - add, view, remove', async ({ page }) => { ... })"

  step_3:
    description: "Follow project patterns"
    guidelines:
      - "Use page.getByRole(), page.getByPlaceholder() for accessibility"
      - "Test keyboard shortcuts (Enter, Tab, Cmd+Enter)"
      - "Verify both success and error states"
      - "Check empty states and edge cases"

  step_4:
    description: "Add visual checks for critical UI"
    example: "await expect(page).toHaveScreenshot('critical-feature.png')"

best_practices:
  - "Test user behavior, not implementation: Use accessible selectors (getByRole, getByPlaceholder)"
  - "Wait for content: Use expect() with auto-waiting instead of manual waits"
  - "Independent tests: Each test should work in isolation"
  - "Visual tests for UI: Use screenshots to catch layout/CSS changes"
  - "Keyboard tests for accessibility: Verify Tab, Enter, Escape work as expected"
  - "Mobile testing: Test responsive breakpoints with different viewports"

ci_cd_integration:
  recommended:
    description: "Docker-based tests for consistency with local development"
    github_actions: |
      - name: Run E2E tests in Docker
        run: npm run test:e2e:docker

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: packages/frontend/playwright-report/

  alternative:
    description: "Local Playwright installation (if Docker not available in CI)"
    github_actions: |
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e --workspace=frontend

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: packages/frontend/playwright-report/

  key_points:
    - "Docker approach matches local development environment exactly"
    - "Headless browser execution"
    - "Retries on failure (reduces flakiness)"
    - "Artifacts uploaded (screenshots, videos, traces)"

troubleshooting:
  platform_differences:
    problem: "Tests fail locally but pass in CI (or vice versa)"
    cause: "Platform-dependent rendering (fonts, antialiasing)"
    solution: "Use Docker for both local and CI to ensure identical environments"
    alternative: "If using local testing: Increase visual diff threshold in playwright.config.ts"

  flaky_tests:
    problem: "Tests pass sometimes, fail other times"
    causes:
      - "Using manual setTimeout or waitFor instead of auto-waiting"
      - "Tests not properly isolated (shared test data, no cleanup)"
      - "Race conditions in application code (async state updates)"
    solutions:
      - "Use await expect() with auto-waiting"
      - "Ensure proper test isolation (independent test data, cleanup between tests)"
      - "Check for race conditions in application code"

  visual_test_failures:
    problem: "Visual tests fail unexpectedly"
    steps:
      - "Review diff in test report: npm run test:e2e:report --workspace=frontend"
      - "Check if CSS, fonts, or layout intentionally changed"
      - "Update baselines if change is expected: npm run test:e2e:update-snapshots --workspace=frontend"

  debugging_tips:
    interactive_debugging: "npm run test:e2e:ui --workspace=frontend (local only)"
    step_through: "npm run test:e2e:debug --workspace=frontend (local only)"
    pause_execution: "Add await page.pause() in test code"
    manual_screenshots: "Use await page.screenshot({ path: 'debug.png' }) at any point"
    browser_console: "Run in headed mode to see console output"

reference:
  playwright_docs: "https://playwright.dev/docs/intro"
  project_test_directory: "packages/frontend/tests/"
  docker_compose_file: "docker-compose.e2e.yml"
  dockerfile: "packages/frontend/Dockerfile.e2e"
  config: "packages/frontend/playwright.config.ts"
