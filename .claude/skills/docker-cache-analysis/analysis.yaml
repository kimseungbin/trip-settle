name: docker-cache-analysis
description: |
  Analyze Docker build cache efficiency in GitHub Actions CI from git notes.

  Use this skill to:
  - Review cache performance over time
  - Identify cache degradation patterns
  - Find commits that broke cache efficiency
  - Get recommendations for improving cache hit rates
  - Compare cache metrics across different change types

instructions: |
  When the user requests cache analysis or cache trend review:

  ## Prerequisites: Git Notes Helper Skill

  This skill uses git notes to store and retrieve cache metrics. Before starting analysis:

  1. **Reference git-notes-helper skill** for common operations:
     - Read `.claude/skills/git-notes-helper/helper.yaml` for git notes operations
     - Use namespace: `ci/cache-metrics`
     - Follow patterns from git-notes-helper for fetching, parsing, and historical analysis

  2. **Key operations from git-notes-helper**:
     - Fetch notes: Operation 1
     - Check existence: Operation 2
     - Show note: Operation 3
     - Parse INI fields: Operation 5
     - Historical analysis: Operation 7
     - Compare commits: Operation 8

  ## Background: How Metrics Are Captured

  Before analyzing metrics, understand how they're generated in the CI pipeline:

  ### CI Workflow Integration

  The `.github/workflows/ci.yml` workflow should include a step in the `e2e-tests` job:

  ```yaml
  - name: Capture Docker cache metrics
    if: always()  # Run even if tests fail
    run: |
      # Extract metrics from Docker build output
      .github/scripts/extract-cache-metrics.sh docker-build.log cache-note.txt

      # Store in git notes
      git config user.name "github-actions[bot]"
      git config user.email "github-actions[bot]@users.noreply.github.com"
      git notes --ref=ci/cache-metrics add -F cache-note.txt ${{ github.sha }}

      # Push to remote
      git push origin refs/notes/ci/cache-metrics
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ```

  **Key points:**
  - Runs after Docker build step (captures build output)
  - Uses `extract-cache-metrics.sh` to parse Docker logs
  - Stores notes in `refs/notes/ci/cache-metrics` namespace
  - Pushes notes to remote for team access

  ### Extraction Script Logic

  The `.github/scripts/extract-cache-metrics.sh` script parses Docker BuildKit output:

  **What it extracts:**
  - Total build time (from final DONE line)
  - Cached vs built layer counts (grep "CACHED")
  - Base image status (checks for "pulling.*playwright")
  - Cache hit rate calculation (CACHED / TOTAL √ó 100)

  **Output format:** INI-style structure (see examples below)

  **Common issues:**
  - Script expects Docker BuildKit output format (default in GitHub Actions)
  - Needs read access to Docker build log file
  - Validates GITHUB_SHA environment variable exists

  ### Git Notes Storage

  **What are git notes?**
  - Metadata attached to commits without changing commit history
  - Stored in separate ref namespace (`refs/notes/ci/cache-metrics`)
  - Not fetched by default (requires explicit fetch)
  - Pushed/pulled independently from commits

  **Storage location:**
  - Local: `.git/refs/notes/ci/cache-metrics`
  - Remote: `refs/notes/ci/cache-metrics` (separate from code refs)

  **Note structure:** Each commit gets one note with cache metrics in INI format

  ### Troubleshooting Capture Issues

  **No notes being created:**
  - Check if CI step is present in workflow
  - Verify extraction script is executable (`chmod +x`)
  - Check GITHUB_SHA environment variable is set
  - Look for script errors in CI logs

  **Notes not pushed to remote:**
  - Verify GITHUB_TOKEN has write permissions
  - Check git config is set (user.name, user.email)
  - Ensure refs/notes/ci/cache-metrics exists in remote

  **Incorrect metrics:**
  - Validate Docker build output format (BuildKit)
  - Check if build log file path is correct
  - Review extraction script regex patterns
  - Compare manual calculation vs script output

  ## Step 1: Fetch and Validate Cache Metrics Notes

  Use **git-notes-helper** Operations 1-2:

  ```bash
  # Operation 1: Fetch notes from remote
  git fetch origin refs/notes/ci/cache-metrics:refs/notes/ci/cache-metrics 2>/dev/null || \
    echo "No remote cache metrics found (notes may not be set up yet)"

  # Operation 2: Check if any notes exist locally
  git notes --ref=ci/cache-metrics list | head -5
  ```

  If no notes exist, inform the user that the CI workflow needs to be updated to capture metrics first.

  ## Step 2: Extract Recent Metrics

  Use **git-notes-helper** Operations 3-7 to retrieve cache metrics:

  **Reference**: See `.claude/skills/git-notes-helper/helper.yaml` ‚Üí Operation 7 (Historical Analysis) for detailed patterns.

  **Simplified workflow** (follows git-notes-helper best practices):

  ```bash
  # List recent commits with cache notes (Operation 4)
  git notes --ref=ci/cache-metrics list | head -20

  # For each commit hash, extract data (Operations 3, 5, 6):

  # Show note content (Operation 3)
  git notes --ref=ci/cache-metrics show <commit-hash>

  # Parse specific fields (Operation 5)
  git notes --ref=ci/cache-metrics show <commit-hash> | grep "^base_image" | cut -d'=' -f2 | xargs
  git notes --ref=ci/cache-metrics show <commit-hash> | grep "^cache_status" | cut -d'=' -f2 | xargs
  git notes --ref=ci/cache-metrics show <commit-hash> | grep "^change_type" | cut -d'=' -f2 | xargs

  # Get commit context (Operation 6)
  git show --no-patch --format="%h: %s (%ar)" <commit-hash>
  ```

  **Important**: Follow git-notes-helper "Best Practices" ‚Üí Avoid complex while loops, use simple sequential commands.

  ## Step 3: Analyze Trends

  Parse the extracted data and identify patterns:

  ### Key Metrics to Analyze:

  1. **Base Image Cache Hit Rate**
     - Count HIT vs MISS for base_image
     - Calculate percentage
     - Identify when cache started missing

  2. **Cache Status Patterns**
     - Group by cache_status (HIT, MISS, optimal, suboptimal)
     - Identify degradation points

  3. **Change Type Correlation**
     - Analyze cache performance by change type:
       - code-only: Should always have high cache hit
       - deps: Expected to have cache misses (npm ci layer)
       - dockerfile: Expected to have cache misses (all layers)

  4. **Time-based Trends**
     - Are cache misses increasing over time?
     - Are there periodic patterns (weekly dependency updates)?

  ### Analysis Template:

  ```
  === DOCKER CACHE EFFICIENCY ANALYSIS ===

  Period: [oldest_timestamp] to [newest_timestamp]
  Commits analyzed: [count]

  ## Base Image Cache Performance

  Cache Hit Rate: [X]% ([HIT_count]/[total_count])
  - HIT: [count] builds (saved ~46s each)
  - MISS: [count] builds (downloaded 786MB)

  Total time saved: ~[X] minutes ([HIT_count] √ó 46s)

  ## Cache Efficiency by Change Type

  code-only changes:
    - Total: [count]
    - Base cache HIT: [X]%
    - Status: [assessment]

  dependency changes:
    - Total: [count]
    - Base cache HIT: [X]%
    - Note: Cache misses expected for npm layer

  dockerfile changes:
    - Total: [count]
    - Base cache HIT: [X]%
    - Note: Full rebuild expected

  ## Trends & Patterns

  [Identify any concerning patterns, e.g.:]
  - ‚ö†Ô∏è Base image cache started missing after commit abc123
  - ‚úì Cache efficiency stable for code-only changes
  - üìä Dependency updates occur every [X] days

  ## Recommendations

  [Provide actionable insights, e.g.:]
  - ‚úì Cache is working optimally
  - ‚ö†Ô∏è Investigate commit abc123 - cache degraded afterward
  - üí° Consider pinning base image hash for more stable caching
  ```

  ## Step 4: Deep Dive (Optional)

  If user requests details about a specific commit or time period:

  ```bash
  # Show full note for a commit
  git notes --ref=ci/cache-metrics show <commit>

  # Find commits between two dates
  git log --since="2025-10-01" --until="2025-10-24" --format="%h" | \
    xargs -I {} git notes --ref=ci/cache-metrics show {} 2>/dev/null
  ```

  ## Step 5: Visualize Trends (Advanced)

  If available, generate a simple ASCII chart showing cache hit rate over time:

  ```
  Cache Hit Rate Over Time (Base Image)

  100% ‚îÇ     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
   90% ‚îÇ     ‚ñà‚ñà
   80% ‚îÇ
   70% ‚îÇ
   60% ‚îÇ
   50% ‚îÇ ‚ñà‚ñà
       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        Oct  Oct  Oct  Oct  Oct
        20   21   22   23   24
  ```

examples:
  basic_analysis:
    user_request: "Analyze cache trends"
    steps:
      - "Fetch git notes: `git fetch origin refs/notes/ci/cache-metrics:refs/notes/ci/cache-metrics`"
      - "Extract metrics from last 20 commits"
      - "Calculate base image hit rate"
      - "Group by change type and analyze"
      - "Present findings with recommendations"

  specific_commit:
    user_request: "Show cache metrics for commit abc123"
    steps:
      - "Fetch notes if not available"
      - "Run: `git notes --ref=ci/cache-metrics show abc123`"
      - "Parse and explain the metrics"
      - "Compare to surrounding commits"

  time_range:
    user_request: "Show cache efficiency for the last week"
    steps:
      - "Get commits from last 7 days"
      - "Extract cache metrics for those commits"
      - "Calculate aggregate statistics"
      - "Identify any anomalies or trends"

  identify_degradation:
    user_request: "Why did cache efficiency drop?"
    steps:
      - "Extract recent metrics"
      - "Find commits where cache_status changed from HIT to MISS"
      - "Check change_type to determine cause"
      - "Show git diff for those commits"
      - "Provide recommendations"

common_issues:
  no_notes_found:
    symptom: "No git notes found"
    solution: |
      The CI workflow hasn't captured cache metrics yet.
      Steps to enable:
      1. Ensure the "Capture cache metrics" step is in .github/workflows/ci.yml
      2. Push a commit to trigger CI
      3. After CI completes, fetch notes: `git fetch origin refs/notes/ci/cache-metrics`

  cache_always_missing:
    symptom: "Base image cache always MISS"
    causes:
      - "Cache key includes Dockerfile hash, which is changing"
      - "GitHub Actions cache expired (7 days unused)"
      - "Cache was manually cleared"
    solution: "Review recent Dockerfile changes and cache configuration"

  inconsistent_efficiency:
    symptom: "Cache hit rate varies wildly"
    cause: "Different change types have different expected cache behavior"
    solution: |
      This is normal:
      - code-only: HIGH hit rate expected
      - deps (package.json): MEDIUM (npm layer rebuilds)
      - dockerfile: LOW (full rebuild)

tips:
  - "Reference git-notes-helper skill for all git notes operations"
  - "Use namespace: `ci/cache-metrics` for all cache metrics notes"
  - "Follow git-notes-helper best practices for parsing and historical analysis"
  - "Group data by change_type for meaningful insights (code-only, deps, dockerfile)"
  - "Compare current metrics to historical baseline using Operation 8 (Compare)"
  - "Look for sudden changes in cache_status (HIT -> MISS) that indicate degradation"
  - "Cache misses are expected for dependency and Dockerfile changes"
  - "Code-only changes should have >80% cache hit rate"

output_format: |
  Present analysis in clear sections:
  1. Summary statistics (hit rate, time saved)
  2. Breakdown by change type
  3. Trend identification
  4. Specific issues or anomalies
  5. Actionable recommendations

  Use visual indicators:
  - ‚úì for good performance
  - ‚ö†Ô∏è for concerning trends
  - üìä for statistical insights
  - üí° for recommendations