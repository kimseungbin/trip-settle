# Docker Compose configuration for E2E testing
# Orchestrates backend, frontend, and Playwright test runner

services:
  # Backend service (multi-stage build with cached dependencies)
  backend:
    image: ${BACKEND_IMAGE:-trip-settle-backend:local}
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BACKEND_TARGET:-backend-dev}
    working_dir: /app/packages/backend
    volumes:
      # Mount source code for hot reload
      - ./packages/backend/src:/app/packages/backend/src:ro
      - ./config:/app/config:ro
      # Volume for node_modules to avoid overwriting pre-installed dependencies
      - backend_node_modules:/app/node_modules
      - backend_package_modules:/app/packages/backend/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=local
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000/api/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s

  # Frontend service (multi-stage build with cached dependencies)
  frontend:
    image: ${FRONTEND_IMAGE:-trip-settle-frontend:local}
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-dev
    working_dir: /app/packages/frontend
    volumes:
      # Mount source code for hot reload
      - ./packages/frontend/src:/app/packages/frontend/src:ro
      - ./packages/frontend/public:/app/packages/frontend/public:ro
      - ./packages/frontend/index.html:/app/packages/frontend/index.html:ro
      - ./packages/frontend/vite.config.ts:/app/packages/frontend/vite.config.ts:ro
      - ./config:/app/config:ro
      # Volume for node_modules to avoid overwriting pre-installed dependencies
      - frontend_node_modules:/app/node_modules
      - frontend_package_modules:/app/packages/frontend/node_modules
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=local
      - CI=true
      - VITE_HOST=0.0.0.0  # Expose Vite server to all network interfaces for Docker inter-container communication
      - VITE_ALLOW_ORIGINS=*
      - API_URL=http://backend:3000/api
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:5173"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s

  # Playwright E2E test runner
  playwright:
    # Use pre-built image if PLAYWRIGHT_IMAGE env var is set (CI mode)
    # Otherwise build from Dockerfile (local development)
    image: ${PLAYWRIGHT_IMAGE:-}
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile.e2e
    init: true  # Recommended by Playwright docs
    ipc: host  # Required for Chromium to run
    security_opt:
      - seccomp:unconfined  # Required for Chromium sandbox
    # Run as root in CI to avoid permission issues with bind mounts
    user: "${DOCKER_USER:-pwuser}"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/packages/backend/node_modules
      - /app/packages/frontend/node_modules
      # Mount test results and reports to host
      - ./packages/frontend/playwright-report:/app/packages/frontend/playwright-report
      - ./packages/frontend/test-results:/app/packages/frontend/test-results
      # Mount snapshots directory to allow updating from Docker
      - ./packages/frontend/tests:/app/packages/frontend/tests
    environment:
      - CI=true
      - TEST_ENV=ci-docker  # Identifies test environment for snapshot management
      - PLAYWRIGHT_BASE_URL=http://frontend:5173
      - PLAYWRIGHT_WORKERS=4  # Run tests in parallel with 4 workers
      - HOME=/root  # Required when running as root
      - PLAYWRIGHT_ARGS=${PLAYWRIGHT_ARGS:-}  # Pass through playwright args (e.g., --update-snapshots)
      - PLAYWRIGHT_TEST_PATTERN=${PLAYWRIGHT_TEST_PATTERN:-}  # Optional: filter tests by directory (e.g., tests/visual/)
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 5 &&
        npm run test:e2e --workspace=frontend -- $PLAYWRIGHT_ARGS $PLAYWRIGHT_TEST_PATTERN
      "

  # Playwright UI mode (interactive watch mode)
  playwright-ui:
    # Use pre-built image if PLAYWRIGHT_IMAGE env var is set (CI mode)
    # Otherwise build from Dockerfile (local development)
    image: ${PLAYWRIGHT_IMAGE:-}
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile.e2e
    init: true
    ipc: host
    security_opt:
      - seccomp:unconfined
    # Run as root in CI to avoid permission issues with bind mounts
    user: "${DOCKER_USER:-pwuser}"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/packages/backend/node_modules
      - /app/packages/frontend/node_modules
      - ./packages/frontend/playwright-report:/app/packages/frontend/playwright-report
      - ./packages/frontend/test-results:/app/packages/frontend/test-results
    ports:
      - "9323:9323"  # Expose Playwright UI port to host
    environment:
      - PLAYWRIGHT_BASE_URL=http://frontend:5173
      - HOME=/root  # Required when running as root
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 5 &&
        echo 'Starting Playwright UI mode...' &&
        echo 'Open http://localhost:9323 in your browser' &&
        npm run test:e2e --workspace=frontend -- --ui --ui-host=0.0.0.0 --ui-port=9323
      "

# Named volumes for node_modules to persist dependencies across restarts
# These preserve the dependencies installed in the Docker images
volumes:
  backend_node_modules:
  backend_package_modules:
  frontend_node_modules:
  frontend_package_modules: