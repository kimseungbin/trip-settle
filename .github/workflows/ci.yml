name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Job 1: Code quality checks (fast feedback)
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npm run format:check

      - name: Run linters
        run: npm run lint

      - name: Type check frontend
        run: npm run type-check --workspace=frontend

  # Job 2: Build all packages
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build 2>&1 | tee build-log.txt
        continue-on-error: true
        id: build

      - name: Check build status
        if: steps.build.outcome == 'failure'
        run: |
          echo "‚ùå Build failed - logs captured in build-log.txt"
          exit 1

      - name: Upload build log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build-log.txt
          retention-days: 30

  # Job 3: Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        package: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.package }} tests
        run: |
          if [ "${{ matrix.package }}" = "frontend" ]; then
            npm run test:unit --workspace=frontend
          else
            npm run test --workspace=${{ matrix.package }} -- --passWithNoTests
          fi

  # Job 4: E2E tests with Docker
  e2e-tests:
    name: E2E Tests (Docker)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]  # Run after build passes (quality runs in parallel)
    # Prevent multiple E2E test runs from conflicting
    concurrency:
      group: e2e-tests-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cleanup any existing Docker resources
        run: |
          echo "üßπ Cleaning up any existing Docker resources..."

          # Stop and remove containers (anonymous volumes auto-cleaned with -v)
          docker compose -f docker-compose.e2e.yml down -v --remove-orphans 2>/dev/null || true

          # Remove any dangling images to free up space
          docker image prune -f || true

          echo "‚úÖ Cleanup complete"

      - name: Run E2E tests in Docker
        run: npm run test:e2e:docker
        env:
          DOCKER_USER: root  # Run as root in CI to avoid permission issues with bind mounts

      - name: Upload Playwright report
        if: always()  # Upload report even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: packages/frontend/playwright-report/
          retention-days: 30

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results
          path: packages/frontend/test-results/
          retention-days: 30

      - name: Clean up Docker resources
        if: always()
        run: docker compose -f docker-compose.e2e.yml down -v --remove-orphans

  # Job 5: All checks passed
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [quality, build, unit-tests, e2e-tests]
    if: always()

    steps:
      - name: Checkout code
        if: contains(needs.*.result, 'failure')
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: contains(needs.*.result, 'failure')
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Download build log artifact
        if: contains(needs.*.result, 'failure')
        uses: actions/download-artifact@v4
        with:
          name: build-log
          path: .
        continue-on-error: true  # May not exist if build didn't fail

      - name: Generate failure report
        if: contains(needs.*.result, 'failure')
        run: node .github/scripts/generate-failure-report.js
        env:
          BUILD_LOG_PATH: build-log.txt
          OUTPUT_PATH: ci-failure-report.md
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}

      - name: Add report to job summary
        if: contains(needs.*.result, 'failure') && hashFiles('ci-failure-report.md') != ''
        run: cat ci-failure-report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload failure report
        if: contains(needs.*.result, 'failure') && hashFiles('ci-failure-report.md') != ''
        uses: actions/upload-artifact@v4
        with:
          name: ci-failure-report
          path: ci-failure-report.md
          retention-days: 30

      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "‚ùå One or more checks failed"
            echo "üìÑ Download the ci-failure-report artifact for detailed analysis"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "‚ö†Ô∏è One or more checks were cancelled"
            exit 1
          else
            echo "‚úÖ All checks passed!"
          fi
