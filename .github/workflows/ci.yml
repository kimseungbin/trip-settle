name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Job 1: Code quality checks (fast feedback)
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npm run format:check

      - name: Run linters
        run: npm run lint

      - name: Type check frontend
        run: npm run type-check --workspace=frontend

  # Job 2: Build all packages
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build 2>&1 | tee build-log.txt
        continue-on-error: true
        id: build

      - name: Check build status
        if: steps.build.outcome == 'failure'
        run: |
          echo "‚ùå Build failed - logs captured in build-log.txt"
          exit 1

      - name: Upload build log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build-log.txt
          retention-days: 30

  # Job 3: Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        package: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.package }} tests
        run: |
          if [ "${{ matrix.package }}" = "frontend" ]; then
            npm run test:unit --workspace=frontend
          else
            npm run test --workspace=${{ matrix.package }} -- --passWithNoTests
          fi

  # Job 4: E2E tests with Docker
  e2e-tests:
    name: E2E Tests (Docker)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]  # Run after build passes (quality runs in parallel)
    # Prevent multiple E2E test runs from conflicting
    concurrency:
      group: e2e-tests-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Playwright base image
        id: cache-playwright-image
        uses: actions/cache@v4
        with:
          path: /tmp/playwright-image.tar
          key: playwright-base-image-v1.56.1-noble-${{ hashFiles('packages/frontend/Dockerfile.e2e') }}
          restore-keys: |
            playwright-base-image-v1.56.1-noble-

      - name: Load or pull Playwright base image
        run: |
          if [ -f /tmp/playwright-image.tar ]; then
            echo "üì¶ Loading cached Playwright base image (786MB)..."
            docker load -i /tmp/playwright-image.tar
            echo "‚úÖ Base image loaded from cache"
          else
            echo "‚¨áÔ∏è Pulling Playwright base image (first time - 786MB)..."
            docker pull mcr.microsoft.com/playwright:v1.56.1-noble
            echo "üíæ Saving base image to cache..."
            docker save mcr.microsoft.com/playwright:v1.56.1-noble -o /tmp/playwright-image.tar
            echo "‚úÖ Base image pulled and cached for future runs"
          fi

      - name: Cleanup any existing Docker resources
        run: |
          echo "üßπ Cleaning up any existing Docker resources..."

          # Stop and remove containers (anonymous volumes auto-cleaned with -v)
          docker compose -f docker-compose.e2e.yml down -v --remove-orphans 2>/dev/null || true

          # Remove any dangling images to free up space
          docker image prune -f || true

          echo "‚úÖ Cleanup complete"

      - name: Build Playwright test image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./packages/frontend/Dockerfile.e2e
          push: false
          load: true
          tags: trip-settle-playwright:ci
          cache-from: type=gha,scope=playwright-e2e
          cache-to: type=gha,mode=max,scope=playwright-e2e
          outputs: type=docker
        # Capture build output for cache metrics analysis
        # Note: docker/build-push-action doesn't support output redirection
        # Build summary is automatically generated by the action

      - name: Capture Docker cache metrics
        if: always()  # Run even if build or tests fail
        run: |
          echo "üìä Capturing Docker cache metrics..."

          # The docker/build-push-action generates a build summary automatically
          # We'll extract metrics from the job summary and Docker inspect

          # Create a simplified metrics note with available data
          cat > cache-note.txt <<EOF
          === DOCKER BUILD CACHE METRICS ===

          [metadata]
          timestamp = $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          commit    = ${GITHUB_SHA:0:7}
          branch    = ${GITHUB_REF_NAME}
          run_url   = ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}

          [cache]
          base_image    = ${{ steps.cache-playwright-image.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}
          layer_cache   = gha (GitHub Actions cache backend)
          build_action  = docker/build-push-action@v6

          [info]
          note          = Metrics captured from CI run
          build_summary = See job summary for detailed layer breakdown
          EOF

          # Store in git notes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add note to current commit
          git notes --ref=ci/cache-metrics add -F cache-note.txt ${{ github.sha }} 2>/dev/null || \
            git notes --ref=ci/cache-metrics append -F cache-note.txt ${{ github.sha }}

          # Push to remote (create ref if it doesn't exist)
          git push origin refs/notes/ci/cache-metrics 2>&1 || \
            echo "‚ö†Ô∏è Failed to push notes (may need to create ref on first run)"

          echo "‚úÖ Cache metrics captured"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run E2E tests with pre-built image
        run: |
          # Use pre-built image in docker-compose
          PLAYWRIGHT_IMAGE=trip-settle-playwright:ci docker compose -f docker-compose.e2e.yml up --abort-on-container-exit
        env:
          DOCKER_USER: root  # Run as root in CI to avoid permission issues with bind mounts

      - name: Upload Playwright report
        if: always()  # Upload report even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: packages/frontend/playwright-report/
          retention-days: 30

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results
          path: packages/frontend/test-results/
          retention-days: 30

      - name: Clean up Docker resources
        if: always()
        run: docker compose -f docker-compose.e2e.yml down -v --remove-orphans

  # Job 5: All checks passed
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [quality, build, unit-tests, e2e-tests]
    if: always()

    steps:
      - name: Checkout code
        if: contains(needs.*.result, 'failure')
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: contains(needs.*.result, 'failure')
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Download build log artifact
        if: contains(needs.*.result, 'failure')
        uses: actions/download-artifact@v4
        with:
          name: build-log
          path: .
        continue-on-error: true  # May not exist if build didn't fail

      - name: Generate failure report
        if: contains(needs.*.result, 'failure')
        run: node .github/scripts/generate-failure-report.js
        env:
          BUILD_LOG_PATH: build-log.txt
          OUTPUT_PATH: ci-failure-report.md
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}

      - name: Add report to job summary
        if: contains(needs.*.result, 'failure') && hashFiles('ci-failure-report.md') != ''
        run: cat ci-failure-report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload failure report
        if: contains(needs.*.result, 'failure') && hashFiles('ci-failure-report.md') != ''
        uses: actions/upload-artifact@v4
        with:
          name: ci-failure-report
          path: ci-failure-report.md
          retention-days: 30

      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "‚ùå One or more checks failed"
            echo "üìÑ Download the ci-failure-report artifact for detailed analysis"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "‚ö†Ô∏è One or more checks were cancelled"
            exit 1
          else
            echo "‚úÖ All checks passed!"
          fi
