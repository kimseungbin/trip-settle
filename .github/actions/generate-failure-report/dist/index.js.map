{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as core from '@actions/core'\nimport * as fs from 'fs'\n\n/**\n * Build error types\n */\ninterface TypeScriptError {\n\tfile: string\n\tline: number\n\tcolumn: number\n\tcode: string\n\tmessage: string\n\ttype: 'typescript'\n}\n\ninterface GenericError {\n\tmessage: string\n\ttype: 'build'\n}\n\ntype BuildError = TypeScriptError | GenericError\n\n/**\n * Errors grouped by file\n */\ninterface ErrorsByFile {\n\t[file: string]: BuildError[]\n}\n\n/**\n * Generate CI Failure Report\n *\n * This action aggregates failure information from various CI jobs and creates\n * a unified markdown report optimized for Claude Code to read and provide\n * actionable feedback.\n */\nfunction run(): void {\n\ttry {\n\t\t// Get inputs\n\t\tconst buildLogPath = core.getInput('build-log-path') || 'build-log.txt'\n\t\tconst outputPath = core.getInput('output-path') || 'ci-failure-report.md'\n\n\t\tcore.info('\uD83D\uDD0D Generating CI failure report...')\n\t\tcore.info(`   Build log: ${buildLogPath}`)\n\t\tcore.info(`   Output: ${outputPath}`)\n\n\t\t// Generate report\n\t\tconst markdown = generateReport(buildLogPath)\n\n\t\t// Write report\n\t\tfs.writeFileSync(outputPath, markdown, 'utf-8')\n\n\t\t// Set outputs\n\t\tcore.setOutput('report-path', outputPath)\n\n\t\tcore.info('\u2705 Report generated successfully')\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tcore.setFailed(error.message)\n\t\t} else {\n\t\t\tcore.setFailed('An unknown error occurred')\n\t\t}\n\t}\n}\n\n/**\n * Main function to generate the failure report\n */\nfunction generateReport(buildLogPath: string): string {\n\tlet markdown = generateHeader()\n\tlet hasErrors = false\n\n\t// Process build log if exists\n\tif (fs.existsSync(buildLogPath)) {\n\t\tcore.info(`\uD83D\uDCC4 Reading build log: ${buildLogPath}`)\n\t\tconst logContent = fs.readFileSync(buildLogPath, 'utf-8')\n\t\tconst buildErrors = parseBuildErrors(logContent)\n\n\t\tif (buildErrors.length > 0) {\n\t\t\tcore.info(`\u274C Found ${buildErrors.length} build error(s)`)\n\t\t\tmarkdown += generateBuildSection(buildErrors)\n\t\t\thasErrors = true\n\t\t} else {\n\t\t\tcore.info('\u2705 No build errors found in log')\n\t\t}\n\t} else {\n\t\tcore.warning(`Build log not found: ${buildLogPath}`)\n\t\tmarkdown += '## Build Failures\\n\\n'\n\t\tmarkdown += '\u26A0\uFE0F Build log file not found. The build may have failed before generating logs.\\n\\n'\n\t\thasErrors = true\n\t}\n\n\t// Add footer\n\tmarkdown += generateFooter()\n\n\tif (!hasErrors) {\n\t\tcore.info('\u2705 No failures to report')\n\t}\n\n\treturn markdown\n}\n\n/**\n * Parse TypeScript compilation errors from build output\n */\nfunction parseBuildErrors(logContent: string): BuildError[] {\n\tconst errors: BuildError[] = []\n\n\t// Match TypeScript errors: \"path/to/file.ts(line,col): error TS1234: message\"\n\tconst tsErrorRegex = /^(.+?\\.tsx?)\\((\\d+),(\\d+)\\): error (TS\\d+): (.+)$/gm\n\tlet match: RegExpExecArray | null\n\n\twhile ((match = tsErrorRegex.exec(logContent)) !== null) {\n\t\terrors.push({\n\t\t\tfile: match[1],\n\t\t\tline: parseInt(match[2], 10),\n\t\t\tcolumn: parseInt(match[3], 10),\n\t\t\tcode: match[4],\n\t\t\tmessage: match[5],\n\t\t\ttype: 'typescript',\n\t\t})\n\t}\n\n\t// Match generic build errors\n\tconst genericErrorRegex = /^error (.+)$/gim\n\twhile ((match = genericErrorRegex.exec(logContent)) !== null) {\n\t\t// Skip if already captured as TypeScript error\n\t\tif (!match[1].startsWith('TS')) {\n\t\t\terrors.push({\n\t\t\t\tmessage: match[1],\n\t\t\t\ttype: 'build',\n\t\t\t})\n\t\t}\n\t}\n\n\treturn errors\n}\n\n/**\n * Generate markdown section for build failures\n */\nfunction generateBuildSection(errors: BuildError[]): string {\n\tif (errors.length === 0) {\n\t\treturn ''\n\t}\n\n\tlet markdown = '## Build Failures\\n\\n'\n\tmarkdown += `**Total Errors:** ${errors.length}\\n\\n`\n\n\t// Group errors by file\n\tconst errorsByFile = groupErrorsByFile(errors)\n\n\t// Output file-specific errors\n\tfor (const [file, fileErrors] of Object.entries(errorsByFile)) {\n\t\tif (file === '_general') continue\n\n\t\tmarkdown += `### \\`${file}\\`\\n\\n`\n\n\t\tfor (const error of fileErrors) {\n\t\t\tif (error.type === 'typescript') {\n\t\t\t\tmarkdown += `**Line ${error.line}:${error.column}** - \\`${error.code}\\`\\n\\n`\n\t\t\t\tmarkdown += `\\`\\`\\`\\n${error.message}\\n\\`\\`\\`\\n\\n`\n\t\t\t}\n\t\t}\n\t}\n\n\t// Output general errors\n\tif (errorsByFile['_general']) {\n\t\tmarkdown += '### General Build Errors\\n\\n'\n\t\tfor (const error of errorsByFile['_general']) {\n\t\t\tif (error.type === 'build') {\n\t\t\t\tmarkdown += `- ${error.message}\\n`\n\t\t\t}\n\t\t}\n\t\tmarkdown += '\\n'\n\t}\n\n\treturn markdown\n}\n\n/**\n * Group errors by file\n */\nfunction groupErrorsByFile(errors: BuildError[]): ErrorsByFile {\n\treturn errors.reduce<ErrorsByFile>((acc, error) => {\n\t\tif (error.type === 'typescript') {\n\t\t\tconst file = error.file\n\t\t\tif (!acc[file]) {\n\t\t\t\tacc[file] = []\n\t\t\t}\n\t\t\tacc[file].push(error)\n\t\t} else {\n\t\t\tif (!acc['_general']) {\n\t\t\t\tacc['_general'] = []\n\t\t\t}\n\t\t\tacc['_general'].push(error)\n\t\t}\n\t\treturn acc\n\t}, {})\n}\n\n/**\n * Generate markdown header with CI context\n */\nfunction generateHeader(): string {\n\tconst githubServerUrl = process.env.GITHUB_SERVER_URL || 'https://github.com'\n\tconst githubRepository = process.env.GITHUB_REPOSITORY || ''\n\tconst githubRunId = process.env.GITHUB_RUN_ID || ''\n\tconst githubSha = process.env.GITHUB_SHA || ''\n\tconst githubRef = process.env.GITHUB_REF || ''\n\n\tconst runUrl = `${githubServerUrl}/${githubRepository}/actions/runs/${githubRunId}`\n\tconst commitUrl = `${githubServerUrl}/${githubRepository}/commit/${githubSha}`\n\n\tlet markdown = '# CI Failure Report\\n\\n'\n\tmarkdown += `**Generated:** ${new Date().toISOString()}\\n\\n`\n\n\tif (githubRunId) {\n\t\tmarkdown += `**Workflow Run:** [#${githubRunId}](${runUrl})\\n\\n`\n\t}\n\n\tif (githubSha) {\n\t\tmarkdown += `**Commit:** [\\`${githubSha.substring(0, 7)}\\`](${commitUrl})\\n\\n`\n\t}\n\n\tif (githubRef) {\n\t\tmarkdown += `**Ref:** \\`${githubRef}\\`\\n\\n`\n\t}\n\n\tmarkdown += '---\\n\\n'\n\n\treturn markdown\n}\n\n/**\n * Generate markdown footer with guidance\n */\nfunction generateFooter(): string {\n\tlet markdown = '\\n---\\n\\n'\n\tmarkdown += '## How to Fix\\n\\n'\n\tmarkdown += '1. Review the errors above and identify the root cause\\n'\n\tmarkdown += '2. Fix the issues locally and ensure tests pass\\n'\n\tmarkdown += '3. Run `npm run build` to verify the build succeeds\\n'\n\tmarkdown += '4. Commit and push your changes\\n\\n'\n\tmarkdown += '## Need Help?\\n\\n'\n\tmarkdown += 'You can provide this report to Claude Code for assistance:\\n'\n\tmarkdown += '1. Download this artifact from the GitHub Actions run\\n'\n\tmarkdown += '2. Share the report with Claude Code\\n'\n\tmarkdown += '3. Claude Code will analyze the errors and suggest fixes\\n'\n\n\treturn markdown\n}\n\n// Run the action\nvoid run()\n"],
  "mappings": "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",
  "names": []
}
