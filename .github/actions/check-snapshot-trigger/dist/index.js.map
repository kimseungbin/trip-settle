{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as core from '@actions/core'\nimport * as github from '@actions/github'\n\n/**\n * Supported test scopes for snapshot updates\n */\ntype TestScope = 'all' | 'visual' | 'e2e'\n\n/**\n * Result of trigger condition check\n */\ninterface TriggerResult {\n\tshouldRun: boolean\n\tbranch: string\n\ttestScope: TestScope\n}\n\n/**\n * Check if visual snapshot update workflow should run\n * This action detects three trigger methods:\n *   1. Manual workflow_dispatch\n *   2. PR comment containing \"/update-snapshots\"\n *   3. Commit footer containing \"Snapshots: update\" or \"Snapshots: skip\"\n */\nasync function run(): Promise<void> {\n\ttry {\n\t\tconst { eventName, payload, ref } = github.context\n\n\t\t// Initialize result with defaults\n\t\tconst result: TriggerResult = {\n\t\t\tshouldRun: false,\n\t\t\tbranch: ref.replace('refs/heads/', ''),\n\t\t\ttestScope: 'all',\n\t\t}\n\n\t\tcore.info(`\uD83D\uDD0D Checking snapshot update trigger condition...`)\n\t\tcore.info(`Event: ${eventName}`)\n\n\t\t// Check trigger condition based on event type\n\t\tswitch (eventName) {\n\t\t\tcase 'workflow_dispatch':\n\t\t\t\thandleWorkflowDispatch(result, payload)\n\t\t\t\tbreak\n\n\t\t\tcase 'issue_comment':\n\t\t\t\thandleIssueComment(result, payload)\n\t\t\t\tbreak\n\n\t\t\tcase 'push':\n\t\t\t\thandlePush(result, payload)\n\t\t\t\tbreak\n\n\t\t\tdefault:\n\t\t\t\tcore.info(`\u2139\uFE0F  Unknown or unsupported event type: ${eventName}`)\n\t\t}\n\n\t\t// Set outputs\n\t\tcore.setOutput('should_run', result.shouldRun.toString())\n\t\tcore.setOutput('branch', result.branch)\n\t\tcore.setOutput('test_scope', result.testScope)\n\n\t\t// Log results\n\t\tcore.info('')\n\t\tcore.info('Results:')\n\t\tcore.info(`  should_run = ${result.shouldRun}`)\n\t\tcore.info(`  branch = ${result.branch}`)\n\t\tcore.info(`  test_scope = ${result.testScope}`)\n\n\t\tif (result.shouldRun) {\n\t\t\tcore.notice(`\u2705 Snapshot update triggered via ${eventName} (scope: ${result.testScope})`)\n\t\t}\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tcore.setFailed(error.message)\n\t\t} else {\n\t\t\tcore.setFailed('An unknown error occurred')\n\t\t}\n\t}\n}\n\n/**\n * Handle workflow_dispatch trigger\n */\nfunction handleWorkflowDispatch(result: TriggerResult, payload: typeof github.context.payload): void {\n\tcore.info('\u2705 Manual workflow_dispatch trigger detected')\n\tresult.shouldRun = true\n\n\t// Check if custom branch was specified\n\tconst customBranch = payload.inputs?.branch\n\tif (customBranch && customBranch.trim() !== '') {\n\t\tresult.branch = customBranch\n\t\tcore.info(`   Using custom branch: ${result.branch}`)\n\t}\n}\n\n/**\n * Handle issue_comment trigger (PR comment)\n */\nfunction handleIssueComment(result: TriggerResult, payload: typeof github.context.payload): void {\n\tcore.info('\uD83D\uDD0D Checking PR comment trigger...')\n\n\tconst commentBody = payload.comment?.body\n\tconst isPullRequest = payload.issue?.pull_request !== undefined\n\n\tif (commentBody && commentBody.startsWith('/update-snapshots') && isPullRequest) {\n\t\tcore.info('\u2705 PR comment trigger detected: /update-snapshots')\n\t\tresult.shouldRun = true\n\t\t// Note: Branch is inherited from current context\n\t} else {\n\t\tcore.info('\u2139\uFE0F  Comment does not match /update-snapshots pattern or not on PR')\n\t}\n}\n\n/**\n * Handle push trigger (commit footer)\n */\nfunction handlePush(result: TriggerResult, payload: typeof github.context.payload): void {\n\tcore.info('\uD83D\uDD0D Checking commit footer trigger...')\n\n\tconst commits = payload.commits || []\n\tcore.info(`   Checking ${commits.length} commit(s) in push...`)\n\n\t// Check ALL commits in the push for snapshot update trigger\n\t// This handles multi-commit pushes where footer might not be in HEAD\n\tconst matchingCommits = commits.filter(\n\t\t(commit: { message: string }) =>\n\t\t\tcommit.message.includes('Snapshots: update') || commit.message.includes('[update-snapshots]') // Legacy format\n\t)\n\n\tif (matchingCommits.length > 0) {\n\t\tcore.info('\u2705 Commit footer trigger detected: Snapshots: update')\n\t\tcore.info('   Matching commits:')\n\n\t\tmatchingCommits.forEach((commit: { id: string; message: string }) => {\n\t\t\tconst shortId = commit.id.substring(0, 7)\n\t\t\tconst firstLine = commit.message.split('\\n')[0]\n\t\t\tcore.info(`     ${shortId}: ${firstLine}`)\n\t\t})\n\n\t\tresult.shouldRun = true\n\n\t\t// Extract test scope from commit footer (optional optimization)\n\t\t// Supported formats:\n\t\t//   Snapshots: update        \u2192 all (default, safest)\n\t\t//   Snapshots: update:all    \u2192 all\n\t\t//   Snapshots: update:visual \u2192 visual tests only (tests/visual/)\n\t\t//   Snapshots: update:e2e    \u2192 e2e tests only (tests/e2e/)\n\t\tconst scopeMatch = matchingCommits[0].message.match(/Snapshots: update:(\\w+)/)\n\n\t\tif (scopeMatch) {\n\t\t\tconst extractedScope = scopeMatch[1]\n\n\t\t\tif (isValidTestScope(extractedScope)) {\n\t\t\t\tresult.testScope = extractedScope\n\t\t\t\tcore.info(`   Test scope: ${result.testScope}`)\n\t\t\t} else {\n\t\t\t\tcore.warning(`   \u26A0\uFE0F  Unknown scope '${extractedScope}', defaulting to 'all'`)\n\t\t\t\tresult.testScope = 'all'\n\t\t\t}\n\t\t} else {\n\t\t\t// No scope specified, default to all\n\t\t\tresult.testScope = 'all'\n\t\t\tcore.info('   Test scope: all (default)')\n\t\t}\n\t} else {\n\t\tcore.info('\u2139\uFE0F  No commits in push contain snapshot update trigger')\n\t}\n}\n\n/**\n * Type guard to validate test scope\n */\nfunction isValidTestScope(scope: string): scope is TestScope {\n\treturn ['all', 'visual', 'e2e'].includes(scope)\n}\n\n// Run the action\nrun()\n"],
  "mappings": "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",
  "names": []
}
