{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as core from '@actions/core'\nimport * as fs from 'fs'\n\n/**\n * Playwright JSON Reporter Schema Types\n */\ninterface PlaywrightConfig {\n\tversion?: string\n\tworkers?: number\n}\n\ninterface TestResult {\n\tstatus: 'passed' | 'failed' | 'skipped' | 'timedOut'\n\tduration: number\n\terror?: {\n\t\tmessage?: string\n\t\tstack?: string\n\t}\n\tattachments?: Array<{\n\t\tname?: string\n\t\tpath?: string\n\t\tcontentType?: string\n\t}>\n}\n\ninterface TestCase {\n\tprojectName?: string\n\tresults?: TestResult[]\n}\n\ninterface TestSpec {\n\ttitle: string\n\ttests?: TestCase[]\n}\n\ninterface TestSuite {\n\ttitle?: string\n\tfile?: string\n\tspecs?: TestSpec[]\n\tsuites?: TestSuite[]\n}\n\ninterface PlaywrightResults {\n\tconfig?: PlaywrightConfig\n\tsuites?: TestSuite[]\n}\n\n/**\n * Test failure metadata\n */\ninterface TestFailure {\n\ttestFile: string\n\ttestName: string\n\tbrowser: string\n\terrorType: 'timeout' | 'visual_regression' | 'assertion' | 'navigation' | 'setup_teardown' | 'unknown'\n\terrorMessage: string\n\tstackTrace: string\n\tduration: number\n\tartifacts: {\n\t\tscreenshots: string[]\n\t\tvideos: string[]\n\t\ttraces: string[]\n\t}\n}\n\n/**\n * Test statistics\n */\ninterface TestStats {\n\ttotal: number\n\tpassed: number\n\tfailed: number\n\tskipped: number\n\tduration: number\n}\n\n/**\n * Extract E2E test failure metadata from Playwright JSON reporter output\n * and generate INI-format note for git notes storage.\n */\nfunction run(): void {\n\ttry {\n\t\t// Get inputs\n\t\tconst resultsPath = core.getInput('results-path', { required: true })\n\t\tconst outputPath = core.getInput('output-path', { required: true })\n\n\t\tcore.info(`\uD83D\uDCCA Extracting E2E failure metadata...`)\n\t\tcore.info(`   Results: ${resultsPath}`)\n\t\tcore.info(`   Output: ${outputPath}`)\n\n\t\t// Read Playwright JSON results\n\t\tlet results: PlaywrightResults\n\t\ttry {\n\t\t\tconst resultsData = fs.readFileSync(resultsPath, 'utf-8')\n\t\t\tresults = JSON.parse(resultsData) as PlaywrightResults\n\t\t} catch (error) {\n\t\t\tthrow new Error(`Failed to read results file: ${error instanceof Error ? error.message : String(error)}`)\n\t\t}\n\n\t\t// Extract metadata from environment\n\t\tconst timestamp = new Date().toISOString()\n\t\tconst commit = process.env.GITHUB_SHA?.substring(0, 7) || 'unknown'\n\t\tconst branch = process.env.GITHUB_REF_NAME || 'unknown'\n\t\tconst runUrl =\n\t\t\tprocess.env.GITHUB_SERVER_URL && process.env.GITHUB_REPOSITORY && process.env.GITHUB_RUN_ID\n\t\t\t\t? `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`\n\t\t\t\t: 'local'\n\n\t\t// Analyze test results\n\t\tconst stats = analyzeTestStats(results)\n\t\tconst failures = extractFailures(results)\n\n\t\tconst passRate = stats.total > 0 ? ((stats.passed / stats.total) * 100).toFixed(1) : '0.0'\n\n\t\t// Generate INI-format note\n\t\tconst note = generateNote({\n\t\t\ttimestamp,\n\t\t\tcommit,\n\t\t\tbranch,\n\t\t\trunUrl,\n\t\t\tstats,\n\t\t\tpassRate,\n\t\t\tfailures,\n\t\t\tresultsPath,\n\t\t\tconfig: results.config,\n\t\t})\n\n\t\t// Write output\n\t\tfs.writeFileSync(outputPath, note, 'utf-8')\n\n\t\t// Set outputs\n\t\tcore.setOutput('tests-total', stats.total.toString())\n\t\tcore.setOutput('tests-passed', stats.passed.toString())\n\t\tcore.setOutput('tests-failed', stats.failed.toString())\n\t\tcore.setOutput('tests-skipped', stats.skipped.toString())\n\t\tcore.setOutput('pass-rate', passRate)\n\t\tcore.setOutput('failures-count', failures.length.toString())\n\n\t\t// Log summary\n\t\tcore.info(`\u2705 E2E failure metadata extracted successfully`)\n\t\tcore.info(`   Tests: ${stats.total} total, ${stats.passed} passed, ${stats.failed} failed`)\n\n\t\tif (failures.length > 0) {\n\t\t\tcore.warning(`   Failures: ${failures.length} test(s) failed`)\n\t\t\tfailures.forEach((f, i) => {\n\t\t\t\tcore.info(`     ${i + 1}. ${f.testName} [${f.browser}] (${f.errorType})`)\n\t\t\t})\n\t\t}\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tcore.setFailed(error.message)\n\t\t} else {\n\t\t\tcore.setFailed('An unknown error occurred')\n\t\t}\n\t}\n}\n\n/**\n * Analyze test statistics from Playwright results\n */\nfunction analyzeTestStats(results: PlaywrightResults): TestStats {\n\tconst stats: TestStats = {\n\t\ttotal: 0,\n\t\tpassed: 0,\n\t\tfailed: 0,\n\t\tskipped: 0,\n\t\tduration: 0,\n\t}\n\n\tfunction processSuite(suite: TestSuite): void {\n\t\tsuite.specs?.forEach(spec => {\n\t\t\tspec.tests?.forEach(test => {\n\t\t\t\tconst result = test.results?.[0]\n\t\t\t\tif (!result) return\n\n\t\t\t\tstats.total++\n\t\t\t\tstats.duration += result.duration || 0\n\n\t\t\t\tswitch (result.status) {\n\t\t\t\t\tcase 'passed':\n\t\t\t\t\t\tstats.passed++\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'failed':\n\t\t\t\t\tcase 'timedOut':\n\t\t\t\t\t\tstats.failed++\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'skipped':\n\t\t\t\t\t\tstats.skipped++\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\n\t\tsuite.suites?.forEach(subSuite => processSuite(subSuite))\n\t}\n\n\tresults.suites?.forEach(suite => processSuite(suite))\n\n\treturn stats\n}\n\n/**\n * Extract failure details from Playwright results\n */\nfunction extractFailures(results: PlaywrightResults): TestFailure[] {\n\tconst failures: TestFailure[] = []\n\n\tfunction processSuite(suite: TestSuite, suitePath: string[] = []): void {\n\t\tconst currentPath = [...suitePath, suite.title].filter((item): item is string => Boolean(item))\n\n\t\tsuite.specs?.forEach(spec => {\n\t\t\tspec.tests?.forEach(test => {\n\t\t\t\tconst result = test.results?.[0]\n\t\t\t\tif (!result || result.status === 'passed' || result.status === 'skipped') return\n\n\t\t\t\t// Classify error type\n\t\t\t\tconst error = result.error || {}\n\t\t\t\tconst errorMessage = error.message || 'No error message'\n\t\t\t\tconst stackTrace = error.stack || ''\n\n\t\t\t\tconst errorType = classifyError(errorMessage)\n\n\t\t\t\t// Extract artifact paths\n\t\t\t\tconst artifacts = {\n\t\t\t\t\tscreenshots: [] as string[],\n\t\t\t\t\tvideos: [] as string[],\n\t\t\t\t\ttraces: [] as string[],\n\t\t\t\t}\n\n\t\t\t\tresult.attachments?.forEach(attachment => {\n\t\t\t\t\tif (attachment.contentType?.startsWith('image/')) {\n\t\t\t\t\t\tartifacts.screenshots.push(attachment.path || 'embedded')\n\t\t\t\t\t} else if (attachment.contentType?.includes('video')) {\n\t\t\t\t\t\tartifacts.videos.push(attachment.path || 'embedded')\n\t\t\t\t\t} else if (attachment.name?.includes('trace')) {\n\t\t\t\t\t\tartifacts.traces.push(attachment.path || 'embedded')\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tfailures.push({\n\t\t\t\t\ttestFile: suite.file || 'unknown',\n\t\t\t\t\ttestName: [...currentPath, spec.title].join(' \u203A '),\n\t\t\t\t\tbrowser: test.projectName || 'unknown',\n\t\t\t\t\terrorType,\n\t\t\t\t\terrorMessage: errorMessage.split('\\n')[0], // First line only\n\t\t\t\t\tstackTrace: stackTrace.split('\\n').slice(0, 5).join('\\n'), // First 5 lines\n\t\t\t\t\tduration: result.duration || 0,\n\t\t\t\t\tartifacts,\n\t\t\t\t})\n\t\t\t})\n\t\t})\n\n\t\tsuite.suites?.forEach(subSuite => processSuite(subSuite, currentPath))\n\t}\n\n\tresults.suites?.forEach(suite => processSuite(suite))\n\n\treturn failures\n}\n\n/**\n * Classify error type based on error message\n */\nfunction classifyError(\n\terrorMessage: string\n): 'timeout' | 'visual_regression' | 'assertion' | 'navigation' | 'setup_teardown' | 'unknown' {\n\tif (/Timeout|timeout|exceeded/i.test(errorMessage)) {\n\t\treturn 'timeout'\n\t} else if (/Screenshot|snapshot|pixels? differ/i.test(errorMessage)) {\n\t\treturn 'visual_regression'\n\t} else if (/expect|toBe|toHaveText|toContain/i.test(errorMessage)) {\n\t\treturn 'assertion'\n\t} else if (/Navigation|goto|net::ERR/i.test(errorMessage)) {\n\t\treturn 'navigation'\n\t} else if (/beforeEach|afterEach|beforeAll|afterAll/i.test(errorMessage)) {\n\t\treturn 'setup_teardown'\n\t}\n\treturn 'unknown'\n}\n\n/**\n * Generate INI-format note\n */\nfunction generateNote(data: {\n\ttimestamp: string\n\tcommit: string\n\tbranch: string\n\trunUrl: string\n\tstats: TestStats\n\tpassRate: string\n\tfailures: TestFailure[]\n\tresultsPath: string\n\tconfig?: PlaywrightConfig\n}): string {\n\tconst { timestamp, commit, branch, runUrl, stats, passRate, failures, resultsPath, config } = data\n\n\tlet note = `=== E2E TEST FAILURE REPORT ===\n\n[metadata]\ntimestamp = ${timestamp}\ncommit = ${commit}\nbranch = ${branch}\nrun_url = ${runUrl}\ntotal_tests = ${stats.total}\npassed = ${stats.passed}\nfailed = ${stats.failed}\nskipped = ${stats.skipped}\npass_rate = ${passRate}%\nduration_sec = ${Math.round(stats.duration / 1000)}\n\n[summary]\nstatus = ${stats.failed > 0 ? 'FAILED' : 'PASSED'}\nnew_failures = ${failures.length}\ntimeout_failures = ${failures.filter(f => f.errorType === 'timeout').length}\nvisual_failures = ${failures.filter(f => f.errorType === 'visual_regression').length}\nassertion_failures = ${failures.filter(f => f.errorType === 'assertion').length}\nnavigation_failures = ${failures.filter(f => f.errorType === 'navigation').length}\nsetup_failures = ${failures.filter(f => f.errorType === 'setup_teardown').length}\n\n`\n\n\t// Add individual failure details\n\tfailures.forEach((failure, index) => {\n\t\tconst num = index + 1\n\t\tnote += `[failure.${num}]\ntest_file = ${failure.testFile}\ntest_name = ${failure.testName}\nbrowser = ${failure.browser}\nerror_type = ${failure.errorType}\nerror_message = ${failure.errorMessage.replace(/\\n/g, ' ')}\nduration_ms = ${failure.duration}\nscreenshots = ${failure.artifacts.screenshots.join(', ') || 'none'}\nvideos = ${failure.artifacts.videos.join(', ') || 'none'}\ntraces = ${failure.artifacts.traces.join(', ') || 'none'}\n\n`\n\t})\n\n\t// Add diagnostics section\n\tnote += `[diagnostics]\nplaywright_version = ${config?.version || 'unknown'}\ntest_env = ${process.env.TEST_ENV || 'unknown'}\nworkers = ${config?.workers || 'unknown'}\nreporter_output = ${resultsPath}\nartifacts_uploaded = ${process.env.CI === 'true' ? 'yes (GitHub Actions)' : 'no (local run)'}\n`\n\n\treturn note\n}\n\n// Run the action\nvoid run()\n"],
  "mappings": "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",
  "names": []
}
